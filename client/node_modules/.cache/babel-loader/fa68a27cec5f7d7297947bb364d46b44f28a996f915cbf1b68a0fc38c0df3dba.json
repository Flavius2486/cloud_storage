{"ast":null,"code":"/* eslint-disable */import { createRouter, createWebHistory } from \"vue-router\";\nimport store from \"../store/index\";\nconst routes = [{\n  path: \"/login\",\n  name: \"login\",\n  component: () => import(\"../views/LoginView.vue\")\n}, {\n  path: \"/dashboard\",\n  name: \"dashboard\",\n  component: () => import(\"../views/DashboardView.vue\"),\n  meta: {\n    requiresAuth: true\n  }\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\nrouter.beforeEach(async (to, from, next) => {\n  await store.restored;\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // Check if the store state has a valid token\n    if (store.state.token) {\n      return next();\n    } else {\n      // Redirect to the login page with a query parameter indicating the intended destination\n      return next({\n        path: \"/login\",\n        query: {\n          redirect: to.fullPath\n        }\n      });\n    }\n  }\n  next();\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","store","routes","path","name","component","meta","requiresAuth","router","history","process","env","BASE_URL","beforeEach","to","from","next","restored","matched","some","record","state","token","query","redirect","fullPath"],"sources":["/home/flavius/Public/projects/personal_cloud_storage/client/src/router/index.js"],"sourcesContent":["/* eslint-disable */ import {\n  createRouter,\n  createWebHistory,\n} from \"vue-router\";\nimport store from \"../store/index\";\n\nconst routes = [\n  {\n    path: \"/login\",\n    name: \"login\",\n    component: () => import(\"../views/LoginView.vue\"),\n  },\n  {\n    path: \"/dashboard\",\n    name: \"dashboard\",\n    component: () => import(\"../views/DashboardView.vue\"),\n    meta: {\n      requiresAuth: true,\n    },\n  },\n];\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n});\n\nrouter.beforeEach(async (to, from, next) => {\n  await store.restored;\n\n  if (to.matched.some((record) => record.meta.requiresAuth)) {\n    // Check if the store state has a valid token\n    if (store.state.token) {\n      return next();\n    } else {\n      // Redirect to the login page with a query parameter indicating the intended destination\n      return next({ path: \"/login\", query: { redirect: to.fullPath } });\n    }\n  }\n\n  next();\n});\n\nexport default router;\n"],"mappings":"AAAA,oBAAqB,SACnBA,YAAY,EACZC,gBAAgB,QACX,YAAY;AACnB,OAAOC,KAAK,MAAM,gBAAgB;AAElC,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,wBAAwB;AAClD,CAAC,EACD;EACEF,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,4BAA4B,CAAC;EACrDC,IAAI,EAAE;IACJC,YAAY,EAAE;EAChB;AACF,CAAC,CACF;AAED,MAAMC,MAAM,GAAGT,YAAY,CAAC;EAC1BU,OAAO,EAAET,gBAAgB,CAACU,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CV;AACF,CAAC,CAAC;AAEFM,MAAM,CAACK,UAAU,CAAC,OAAOC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAC1C,MAAMf,KAAK,CAACgB,QAAQ;EAEpB,IAAIH,EAAE,CAACI,OAAO,CAACC,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACd,IAAI,CAACC,YAAY,CAAC,EAAE;IACzD;IACA,IAAIN,KAAK,CAACoB,KAAK,CAACC,KAAK,EAAE;MACrB,OAAON,IAAI,CAAC,CAAC;IACf,CAAC,MAAM;MACL;MACA,OAAOA,IAAI,CAAC;QAAEb,IAAI,EAAE,QAAQ;QAAEoB,KAAK,EAAE;UAAEC,QAAQ,EAAEV,EAAE,CAACW;QAAS;MAAE,CAAC,CAAC;IACnE;EACF;EAEAT,IAAI,CAAC,CAAC;AACR,CAAC,CAAC;AAEF,eAAeR,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}